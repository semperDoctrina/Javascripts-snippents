Write a program for printing the sum of given numbers.
Input :

1 2 3 4
Output:

10


Input:

4 1 3 1 1 1 2
Output:

13
----------------------------------------------------------SOLUTION---------------------------------------------------
function sumOfNumbers(...args) {
  // Use the reduce method to sum all the numbers in args array
  const sum = args.reduce((acc, curr) => acc + curr, 0);
  
  return sum;
}



// Input and output has already been handled for you

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let remainder = '';
process.stdin.on('data', function (chunk) {
    var arr = [];
    var a = chunk.toString().split(' '); 
    for(var i=0; i<a.length; i++)
    {
        arr.push(parseInt(a[i]));
    }
    ans = sumOfNumbers(...arr);
    var ans1 = ""+ans;
    process.stdout.write(ans1);
    process.exit();
});
----------------------------------------------------EXPLANATION-----------------------------------------------------------------------
The given code is a template for a JavaScript program that reads input from the standard input and expects a space-separated list of numbers. It then calls a function `sumOfNumbers` with the provided numbers as arguments and writes the result to the standard output. You need to complete the implementation of the `sumOfNumbers` function. Here's an example of how you can complete the code:

```javascript
function sumOfNumbers(...args) {
  // Use the reduce method to sum all the numbers in args array
  const sum = args.reduce((acc, curr) => acc + curr, 0);
  
  return sum;
}
```

In the above code, the `sumOfNumbers` function takes a rest parameter `...args`, which collects all the input numbers into an array called `args`.
It then uses the `reduce` method on the `args` array to sum up all the numbers. 
The `reduce` method iterates over each element of the array and accumulates the sum by adding each element to the accumulator `acc`.

To complete the implementation, replace the placeholder `return ()` in the provided code with `return sum;`.

Once you have added the implementation to the `sumOfNumbers` function, you can run the program, and it will calculate the sum of the provided numbers and write the result to the standard output.

MORE ON REDUCE METHOD ---------------------------------------------------------------------------------------------------------------------

The `reduce` method is a powerful higher-order function available in JavaScript arrays. It allows to iteratively reduce an array to a single value by applying a provided callback function on each element.

The syntax of the `reduce` method is as follows:
```javascript
array.reduce(callback, initialValue)
```

Here's how the parameters work:
- `callback`: A function that will be executed on each element of the array. It takes four arguments:
`accumulator`, `currentValue`, `currentIndex`, and `array`.
  - `accumulator`: The accumulator value that gets updated after each iteration.
  - `currentValue`: The current element being processed in the array.
  - `currentIndex` (optional): The index of the current element being processed.
  - `array` (optional): The array on which the `reduce` method was called.
- `initialValue` (optional): A value that is used as the initial value of the accumulator.
If not provided, the first element of the array will be used as the initial value, and the iteration will start from the second element.

The `reduce` method executes the callback function on each element of the array, passing the current element and the accumulator value. 
It accumulates the result of each iteration in the accumulator, which gets passed to the next iteration.
In the end, it returns the final value of the accumulator.

Here's an example of how the `reduce` method can be used to calculate the sum of an array of numbers:
```javascript
const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // Output: 15
```

In this example, the `reduce` method is called on the `numbers` array. 
The callback function `(accumulator, currentValue) => accumulator + currentValue` adds the current element to the accumulator. 
The initial value of the accumulator is set to `0`. The `reduce` method iterates over each element, adding it to the accumulator, and returns the final sum.

The `reduce` method is not limited to calculating sums. You can perform various operations with it, such as finding the maximum or minimum value, 
transforming an array into a different data structure, or accumulating values based on specific conditions.

It's important to note that the `reduce` method does not modify the original array; it only returns a single result based on the iterations. 
If you need to modify the array, you can use other array methods like `map`, `filter`, or `forEach` in combination with `reduce`.

Overall, the `reduce` method is a versatile tool for working with arrays in JavaScript, 
allowing to perform complex calculations and transformations in a concise and efficient manner.
----------------------------------------ANOTHER EXAMPLE-----------------------------------------------------

Certainly! Here's a simple example that demonstrates the usage of the `reduce` method to find the product of an array of numbers:

```javascript
const numbers = [2, 3, 4, 5];

const product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);
console.log(product); // Output: 120
```

In this example, we have an array `numbers` containing the values `[2, 3, 4, 5]`. The goal is to calculate the product of all the numbers in the array.

The `reduce` method is called on the `numbers` array. The callback function `(accumulator, currentValue) => accumulator * currentValue` multiplies the current element with the accumulator. The initial value of the accumulator is set to `1`. 

The `reduce` method iterates over each element of the array, multiplying it with the accumulator, and updates the accumulator with the new result. In the end, it returns the final product of all the numbers in the array.

In this example, the calculation can be visualized as follows:

- Initial step: `accumulator = 1` (initial value), `currentValue = 2` (first element)
  - Result after step: `accumulator = 1 * 2 = 2`
- Second step: `accumulator = 2` (previous result), `currentValue = 3` (second element)
  - Result after step: `accumulator = 2 * 3 = 6`
- Third step: `accumulator = 6` (previous result), `currentValue = 4` (third element)
  - Result after step: `accumulator = 6 * 4 = 24`
- Fourth step: `accumulator = 24` (previous result), `currentValue = 5` (fourth element)
  - Result after step: `accumulator = 24 * 5 = 120`

Therefore, the final result stored in the `product` variable is `120`, which represents the product of all the numbers in the `numbers` array.


